================================================================================
                    üöÄ GU√çA COMPLETA PARA CONECTAR POSTGRESQL
================================================================================

Esta gu√≠a te llevar√° paso a paso para conectar tu API StatsTracker a PostgreSQL.
Todos los c√≥digos est√°n listos para copiar y pegar.

================================================================================
                                PREPARACI√ìN
================================================================================

PASO 1: INSTALAR DEPENDENCIAS DE NODE.JS
----------------------------------------
Abre tu terminal en la carpeta del proyecto y ejecuta:

npm install --save @nestjs/typeorm typeorm pg

Esto instala:
- @nestjs/typeorm: El pegamento oficial entre NestJS y TypeORM
- typeorm: El "traductor" que convierte c√≥digo TypeScript en SQL
- pg: El motor de PostgreSQL para Node.js

PASO 2: INSTALAR POSTGRESQL EN TU M√ÅQUINA
-----------------------------------------
- Windows: Descarga desde https://www.postgresql.org/download/windows/
- macOS: brew install postgresql
- Ubuntu: sudo apt install postgresql postgresql-contrib

PASO 3: CREAR LA BASE DE DATOS
------------------------------
1. Abre psql (l√≠nea de comandos de PostgreSQL)
2. Ejecuta: CREATE DATABASE statstracker;
3. Sal con: \q

================================================================================
                            CONFIGURACI√ìN DE ARCHIVOS
================================================================================

PASO 4: CREAR ARCHIVO DE CONFIGURACI√ìN DE POSTGRESQL
----------------------------------------------------
1. Busca el archivo: src/database-postgres.example.ts
2. REN√ìMBRALO a: src/database-postgres.ts
3. El archivo ya contiene la configuraci√≥n correcta, solo cambia la contrase√±a:

export const databaseConfig: TypeOrmModuleOptions = {
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'postgres',
  password: 'password', // ‚ö†Ô∏è CAMBIA ESTA CONTRASE√ëA POR LA TUYA
  database: 'statstracker',
  entities: [Event],
  synchronize: true, // Solo para desarrollo - crea tablas autom√°ticamente
  logging: true, // Muestra las consultas SQL en la consola
};

PASO 5: ACTUALIZAR APP.MODULE.TS
--------------------------------
Abre src/app.module.ts y REEMPLAZA TODO el contenido con esto:

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { databaseConfig } from './database-postgres';
import { EventsModule } from './events/events.module';
import { StatsModule } from './stats/stats.module';

@Module({
  imports: [
    TypeOrmModule.forRoot(databaseConfig),
    EventsModule,
    StatsModule,
  ],
  controllers: [],
  providers: [],
})
export class AppModule {}

PASO 6: ACTUALIZAR EVENTS.MODULE.TS
----------------------------------
Abre src/events/events.module.ts y REEMPLAZA TODO el contenido con esto:

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Event } from './event.entity';
import { EventsController } from './events.controller';
import { EventsService } from './events.service';

@Module({
  imports: [TypeOrmModule.forFeature([Event])],
  controllers: [EventsController],
  providers: [EventsService],
  exports: [EventsService],
})
export class EventsModule {}

PASO 7: ACTUALIZAR EVENTS.SERVICE.TS (OPCIONAL)
-----------------------------------------------
Por defecto, tu API funciona perfectamente en memoria. Si quieres usar PostgreSQL:

1. Abre src/events/events.service.ts
2. REEMPLAZA TODO el c√≥digo con esto:

import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Event } from './event.entity';
import { CreateEventDto, UpdateEventDto } from './events.schemas';

@Injectable()
export class EventsService {
  constructor(
    @InjectRepository(Event)
    private readonly eventsRepository: Repository<Event>,
  ) {}

  async findAll(): Promise<Event[]> {
    return this.eventsRepository.find();
  }

  async findOne(id: number): Promise<Event> {
    const found = await this.eventsRepository.findOne({ where: { id } });
    if (!found) throw new NotFoundException(`Evento ${id} no encontrado`);
    return found;
  }

  async create(data: CreateEventDto): Promise<Event> {
    const newEvent = this.eventsRepository.create(data);
    return this.eventsRepository.save(newEvent);
  }

  async update(id: number, data: UpdateEventDto): Promise<Event> {
    const eventToUpdate = await this.eventsRepository.preload({
      id: id,
      ...data,
    });
    if (!eventToUpdate) throw new NotFoundException(`Evento ${id} no encontrado`);
    return this.eventsRepository.save(eventToUpdate);
  }

  async remove(id: number): Promise<void> {
    const result = await this.eventsRepository.delete(id);
    if (result.affected === 0) throw new NotFoundException(`Evento ${id} no encontrado`);
  }
}

================================================================================
                              CONFIGURACI√ìN OPCIONAL
================================================================================

PASO 8: VARIABLES DE ENTORNO (RECOMENDADO)
------------------------------------------
Si quieres usar variables de entorno (m√°s seguro):

1. Crea un archivo .env en la ra√≠z del proyecto con:
   DB_HOST=localhost
   DB_PORT=5432
   DB_USERNAME=postgres
   DB_PASSWORD=tu_password_aqui
   DB_NAME=statstracker

2. Cambia la configuraci√≥n en src/database-postgres.ts por:
   host: process.env.DB_HOST || 'localhost',
   port: parseInt(process.env.DB_PORT) || 5432,
   username: process.env.DB_USERNAME || 'postgres',
   password: process.env.DB_PASSWORD || 'password',
   database: process.env.DB_NAME || 'statstracker',

================================================================================
                                  ¬°LISTO!
================================================================================

Una vez que completes estos pasos:

‚úÖ Tu API se conectar√° a PostgreSQL
‚úÖ Los datos se guardar√°n permanentemente  
‚úÖ Podr√°s escalar a producci√≥n f√°cilmente
‚úÖ No perder√°s datos al reiniciar el servidor

Para probar:
1. Ejecuta: npm run start:dev
2. Ve a: http://localhost:3000/api
3. Prueba crear eventos - ahora se guardar√°n en PostgreSQL

================================================================================
                                ARCHIVOS IMPORTANTES
================================================================================

üìÅ Archivos que modificaste:
- src/database-postgres.ts (renombrado de .example)
- src/app.module.ts (agregaste TypeORM)
- src/events/events.module.ts (agregaste TypeORM)
- src/events/events.service.ts (opcional - versi√≥n PostgreSQL)

üìÅ Archivos que NO tocas:
- src/events/event.entity.ts (ya est√° listo)
- src/events/events.controller.ts (no cambia)
- src/stats/ (no cambia)

================================================================================
                               SOLUCI√ìN DE PROBLEMAS
================================================================================

‚ùå Error "Cannot find module 'typeorm'"
   ‚Üí Ejecuta: npm install @nestjs/typeorm typeorm pg

‚ùå Error de conexi√≥n a PostgreSQL
   ‚Üí Verifica que PostgreSQL est√© ejecut√°ndose
   ‚Üí Verifica usuario y contrase√±a en database-postgres.ts
   ‚Üí Verifica que la base de datos 'statstracker' exista

‚ùå Error "relation 'events' does not exist"
   ‚Üí Verifica que synchronize: true est√© en la configuraci√≥n
   ‚Üí Reinicia el servidor: npm run start:dev

================================================================================
